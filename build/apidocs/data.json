{
    "project": {
        "name": "nextract",
        "description": "",
        "version": "0.0.3",
        "url": ""
    },
    "files": {
        "build/examples/csvAndSort.js": {
            "name": "build/examples/csvAndSort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/exampleUtils.js": {
            "name": "build/examples/exampleUtils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/filterAndGroup.js": {
            "name": "build/examples/filterAndGroup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/httpAndPluck.js": {
            "name": "build/examples/httpAndPluck.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/jsonAndSort.js": {
            "name": "build/examples/jsonAndSort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/parallelTasks.js": {
            "name": "build/examples/parallelTasks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/parameterizedQuery.js": {
            "name": "build/examples/parameterizedQuery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queries.js": {
            "name": "build/examples/queries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queryAndSortBenchmark.js": {
            "name": "build/examples/queryAndSortBenchmark.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queryCalcAndFilter.js": {
            "name": "build/examples/queryCalcAndFilter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Calculator/Calculator.js": {
            "name": "build/plugins/core/Calculator/Calculator.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Calculator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Database/Database.js": {
            "name": "build/plugins/core/Database/Database.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Database": 1
            },
            "fors": {
                "Nextract.Plugins.Core.Database": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/Filter/Filter.js": {
            "name": "build/plugins/core/Filter/Filter.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Nextract.Plugins.Core.Filter": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/GroupBy/GroupBy.js": {
            "name": "build/plugins/core/GroupBy/GroupBy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Http/Http.js": {
            "name": "build/plugins/core/Http/Http.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Http": 1
            },
            "fors": {
                "Nextract.Plugins.Core.Http": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/Input/Input.js": {
            "name": "build/plugins/core/Input/Input.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Logger/Logger.js": {
            "name": "build/plugins/core/Logger/Logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Output/Output.js": {
            "name": "build/plugins/core/Output/Output.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Output": 1
            },
            "fors": {
                "Nextract.Plugins.Core.Output": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/Sort/Sort.js": {
            "name": "build/plugins/core/Sort/Sort.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Sort": 1
            },
            "fors": {
                "Nextract.Plugins.Core.Sort": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/Utils/Utils.js": {
            "name": "build/plugins/core/Utils/Utils.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Nextract.Plugins.Core.Utils": 1
            },
            "namespaces": {}
        },
        "build/plugins/pluginBase.js": {
            "name": "build/plugins/pluginBase.js",
            "modules": {},
            "classes": {
                "Nextract.PluginBase": 1
            },
            "fors": {
                "Nextract.PluginBase": 1
            },
            "namespaces": {}
        },
        "build/nextract.js": {
            "name": "build/nextract.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Nextract": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Nextract.Plugins.Core.Calculator": {
            "name": "Nextract.Plugins.Core.Calculator",
            "shortname": "Nextract.Plugins.Core.Calculator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 13,
            "description": "Mixes in a series of common mathematical calculations"
        },
        "Nextract.Plugins.Core.Database": {
            "name": "Nextract.Plugins.Core.Database",
            "shortname": "Nextract.Plugins.Core.Database",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Database/Database.js",
            "line": 41,
            "description": "Mixes in methods used to work with a database"
        },
        "Nextract.Plugins.Core.Filter": {
            "name": "Nextract.Plugins.Core.Filter",
            "shortname": "Nextract.Plugins.Core.Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Nextract.Plugins.Core.Http": {
            "name": "Nextract.Plugins.Core.Http",
            "shortname": "Nextract.Plugins.Core.Http",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Http/Http.js",
            "line": 14,
            "description": "Mixes in methods used make HTTP requests"
        },
        "Nextract.Plugins.Core.Input": {
            "name": "Nextract.Plugins.Core.Input",
            "shortname": "Nextract.Plugins.Core.Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Input/Input.js",
            "line": 22,
            "description": "Mixes in methods used to read files"
        },
        "Nextract.Plugins.Core.Output": {
            "name": "Nextract.Plugins.Core.Output",
            "shortname": "Nextract.Plugins.Core.Output",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Output/Output.js",
            "line": 22,
            "description": "Mixes in methods used to export files"
        },
        "Nextract.Plugins.Core.Sort": {
            "name": "Nextract.Plugins.Core.Sort",
            "shortname": "Nextract.Plugins.Core.Sort",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Sort/Sort.js",
            "line": 38,
            "description": "Mixes in methods used to sort data"
        },
        "Nextract.Plugins.Core.Utils": {
            "name": "Nextract.Plugins.Core.Utils",
            "shortname": "Nextract.Plugins.Core.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Nextract.PluginBase": {
            "name": "Nextract.PluginBase",
            "shortname": "Nextract.PluginBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/pluginBase.js",
            "line": 87,
            "description": "The base plugin class that all plugins inherit from"
        },
        "Nextract": {
            "name": "Nextract",
            "shortname": "Nextract",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "build/examples/csvAndSort.js",
            "line": 3,
            "description": "Example: CSV input and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/exampleUtils.js",
            "line": 3,
            "description": "A handful of heler functions that are used throughout the examples",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/filterAndGroup.js",
            "line": 3,
            "description": "Example: Filter and group data...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/httpAndPluck.js",
            "line": 3,
            "description": "Example: Http request and pluck...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/jsonAndSort.js",
            "line": 3,
            "description": "Example: JSON input and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/parallelTasks.js",
            "line": 3,
            "description": "Example: Running some etlJob tasks in parallel",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/parameterizedQuery.js",
            "line": 3,
            "description": "Example: Parameterized query",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queries.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queryAndSortBenchmark.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queryCalcAndFilter.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 48,
            "description": "Operates on a stream adding two numbers and/or object properties",
            "itemtype": "method",
            "name": "add",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Calculator.add('salary', 1000, 'new_salary'))"
            ],
            "params": [
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 66,
            "description": "Operates on a stream subtracting two numbers and/or object properties",
            "itemtype": "method",
            "name": "subtract",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Calculator.subtract('salary', 1000, 'new_salary'))"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 85,
            "description": "Operates on a stream multiplying two numbers and/or object properties",
            "itemtype": "method",
            "name": "multiply",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Calculator.multiply('salary', 1000, 'new_salary'))"
            ],
            "params": [
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 103,
            "description": "Operates on a stream dividing two numbers and/or object properties",
            "itemtype": "method",
            "name": "divide",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Calculator.divide('salary', 1000, 'new_salary'))"
            ],
            "params": [
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator/Calculator.js",
            "line": 121,
            "description": "Operates on a stream concatenating strings and/or object properties",
            "itemtype": "method",
            "name": "concat",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Calculator.concat(['Mr/Mrs:', 'first_name', 'last_name'], ' ', 'full_name'))"
            ],
            "params": [
                {
                    "name": "propsOrValsToConcat",
                    "description": "An array of strings and/or object properties to concat",
                    "type": "Array"
                },
                {
                    "name": "delimiter",
                    "description": "The delimiter to use in between each propsOrValsToConcat",
                    "type": "String"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Database/Database.js",
            "line": 128,
            "description": "Query interface for select statements",
            "itemtype": "method",
            "name": "selectQuery",
            "example": [
                "\n    var sql = 'select first_name, last_name, age, salary from users where id = :id';",
                "\n    var sqlParams = { id: id };",
                "\n    ETL.Plugins.Core.Database.selectQuery('dbname', sql, sqlParams);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "sql",
                    "description": "SQL statement to execute. Can be a fully formed SQL select statement or\na parameterized one with \":key\" placeholders. If the later, then sqlReplacements\nmust be an object of key/values to be replaced.",
                    "type": "String"
                },
                {
                    "name": "sqlReplacements",
                    "description": "(optional) List of key/value params to be subbed out in a parameterized query",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a promise resolved with a read stream to use in conjuction with pipe()",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database/Database.js",
            "line": 156,
            "description": "Allows you to run a select query against a database using data obtained from previous steps. Runs\na query for each row in the stream. Each stream element will be returned with the properties of the\noriginal item data + the properties of the joined data.  Optionally returns all or just matched rows.",
            "itemtype": "method",
            "name": "joinQuery",
            "example": [
                "\n    var joinSQL = 'select first_name, last_name from users where id = ?';",
                "\n    var joinFilterColumns = [ 'id' ];",
                "\n    var joinColumnsToReturn = ['first_name', 'last_name'];",
                "\n    ETL.Plugins.Core.Database.joinQuery(streamElement, 'nextract_sample', joinSQL, joinFilterColumns, joinColumnsToReturn, true);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "sqlStatment",
                    "description": "The sql to run for each row in the collection. The WHERE clause should contain\nsome ? placeholder references to match on against the current row. The query must return only 1 matching row.",
                    "type": "String"
                },
                {
                    "name": "joinFilterColumns",
                    "description": "An array of properties to use as replacements for the ? placeholders. Pulls\nthe values from the incoming element.",
                    "type": "Array"
                },
                {
                    "name": "joinColumnsToReturn",
                    "description": "A list of the properties to return in the unmatched case. Should\nnormally match the columns defined in the SELECT clause. Only required if returnedUnmatched is set to true.",
                    "type": "Array"
                },
                {
                    "name": "returnedUnmatched",
                    "description": "(optional: defaults to true) Returns all original collection items\nwill null as the value for properties missed in the join.  If true, then joinColumnsToReturn must be given.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns stream element with added properties from the join query",
                "type": "Stream"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database/Database.js",
            "line": 246,
            "description": "Will insert each stream item into a database table. Uses batched inserts for performance gains.",
            "itemtype": "method",
            "name": "insertQuery",
            "example": [
                "\n    transform.Plugins.Core.Database.insertQuery('nextract_sample', 'page')"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "batchAmount",
                    "description": "(optional) Number of rows to batch insert (defaults to 1000)",
                    "type": "Integer"
                },
                {
                    "name": "queueSize",
                    "description": "(optional) Number of async queues used to manage batch inserts (defaults to 10)",
                    "type": "Integer"
                }
            ],
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database/Database.js",
            "line": 322,
            "description": "Allows you to run an UPDATE query against a database using data obtained from previous steps. Runs\na query for each element in the stream.",
            "itemtype": "method",
            "name": "updateQuery",
            "example": [
                "\n    var matchCriteria = [{ tableColumn: 'id', comparator: '=', collectionField: 'id' }];",
                "\n    return ETL.Plugins.Core.Database.updateQuery('nextract_sample', 'users', ['first_name'], matchCriteria);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "columnsToUpdate",
                    "description": "Array of property (column) names to use in the UPDATE",
                    "type": "Array"
                },
                {
                    "name": "matchCriteria",
                    "description": "Array of objects with key/value params to be subbed out in a\nparameterized query. The expected format is  [{ tableColumn: '', comparator: '', collectionField: '' }].\nIf multiple objects are passed WHERE clauses uses AND for multiple condition filtering.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database/Database.js",
            "line": 375,
            "description": "Allows you to run a DELETE query against a database using data obtained from previous steps. Runs\na query for each element in the stream.",
            "itemtype": "method",
            "name": "deleteQuery",
            "example": [
                "\n    var matchCriteria = [\n     { tableColumn: 'first_name', comparator: '=', collectionField: 'first_name' },\n     { tableColumn: 'last_name', comparator: '=', collectionField: 'last_name' }\n    ];",
                "\n    return ETL.Plugins.Core.Database.deleteQuery('nextract_sample', 'users', matchCriteria);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "matchCriteria",
                    "description": "Array of objects with key/value params to be subbed out in a\nparameterized query. The expected format is  [{ tableColumn: '', comparator: '', collectionField: '' }].",
                    "type": "Array"
                }
            ],
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 26,
            "description": "Filters a stream, passing along all elements that equal the given testValue",
            "itemtype": "method",
            "name": "equals",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.equals('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "String|Number"
                },
                {
                    "name": "useStrictEquality",
                    "description": "(optional, defaults to false) Uses the === comparison operator.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 59,
            "description": "Filters a stream, passing along all elements that do not equal the given testValue",
            "itemtype": "method",
            "name": "notEquals",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.notEquals('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "String|Number"
                },
                {
                    "name": "useStrictEquality",
                    "description": "(optional, defaults to false) Uses the !== comparison operator.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 92,
            "description": "Filters a stream, passing along all elements that are great than the given testValue",
            "itemtype": "method",
            "name": "greaterThan",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.greaterThan('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 118,
            "description": "Filters a stream, passing along all elements that are great than or equal to the given testValue",
            "itemtype": "method",
            "name": "greaterThanOrEqualTo",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.greaterThanOrEqualTo('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 144,
            "description": "Filters a stream, passing along all elements that are less than the given testValue",
            "itemtype": "method",
            "name": "lessThan",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.lessThan('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter/Filter.js",
            "line": 170,
            "description": "Filters a stream, passing along all elements that are less or equal to than the given testValue",
            "itemtype": "method",
            "name": "lessThanOrEqualTo",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Filter.lessThanOrEqualTo('age', 30))"
            ],
            "params": [
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against",
                    "type": "String"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/GroupBy/GroupBy.js",
            "line": 17,
            "description": "Computes the maximum value of array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "maxBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.maxBy(objects, 'n');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The property to use in this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Http"
        },
        {
            "file": "build/plugins/core/GroupBy/GroupBy.js",
            "line": 35,
            "description": "Computes the minimum value of array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#minBy",
            "itemtype": "method",
            "name": "minBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.minBy(objects, 'n');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The property to use in this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Http"
        },
        {
            "file": "build/plugins/core/GroupBy/GroupBy.js",
            "line": 53,
            "description": "Computes the mean of the values in array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "meanBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.meanBy(objects, 'n');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The property to use in this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Http"
        },
        {
            "file": "build/plugins/core/GroupBy/GroupBy.js",
            "line": 71,
            "description": "Computes the sum of the values in array. It accepts iteratee which is invoked for each element\nin array to generate the value to be summed. The iteratee is invoked with one argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "sumBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.sumBy(objects, 'n');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The property to use in this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the sum",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Http"
        },
        {
            "file": "build/plugins/core/Http/Http.js",
            "line": 29,
            "description": "Make http calls. It supports HTTPS and follows redirects by default.",
            "itemtype": "method",
            "name": "makeRequest",
            "example": [
                "\n    var requestConfig = {\n      url: 'http://example.com',\n      qs: { searchString: 'foo', page: 1 },\n      method: 'GET',\n      headers: { 'Content-Type': 'MyContentType', 'Custom-Header': 'Custom Value' }\n     };",
                "\n    yourTransformInstance.Plugins.Core.Http.makeRequest(requestConfig, 'json')"
            ],
            "params": [
                {
                    "name": "requestConfig",
                    "description": "A request configuration made up of key/value pairs. Wraps\nthe popular npm request module so any request config supported by this module will work.\nSee - https://www.npmjs.com/package/request#requestoptions-callback.",
                    "type": "Object"
                },
                {
                    "name": "responseFormat",
                    "description": "(optional, defaults to buffer) Allowed values are string, json, or buffer.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Http"
        },
        {
            "file": "build/plugins/core/Input/Input.js",
            "line": 37,
            "description": "Streams in a CSV file",
            "itemtype": "method",
            "name": "readCsvFile",
            "example": [
                "\n    ETL.Plugins.Core.Input.readCsvFile(filePath, parserConfig);"
            ],
            "params": [
                {
                    "name": "fileType",
                    "description": "Type of file to write; json, csv, or excel",
                    "type": "String"
                },
                {
                    "name": "filePath",
                    "description": "Full path of file to read (include filename and extension)",
                    "type": "String"
                },
                {
                    "name": "parserConfig",
                    "description": "If fileType is \"csv\" then you can also pass a\nparsing definition to handle the specific needs of your csv. If no custom parserConfig\nis given then a default config of { delimiter: ',', columns: true } is used. The parserConfig\nobject allow all paser options supported by cvs-parse (http://csv.adaltas.com/parse/).",
                    "type": "Object"
                }
            ],
            "class": "Nextract.Plugins.Core.Input"
        },
        {
            "file": "build/plugins/core/Input/Input.js",
            "line": 74,
            "description": "Streams in a JSON file",
            "itemtype": "method",
            "name": "readJsonFile",
            "example": [
                "\n    ETL.Plugins.Core.Input.readJsonFile(filePath, pathToParse);"
            ],
            "params": [
                {
                    "name": "filePath",
                    "description": "Full path of file to read (include filename and extension)",
                    "type": "String"
                },
                {
                    "name": "pathToParse",
                    "description": "Parses stream of values that match a path. To understand this format of\nthis param place see the following doc - https://www.npmjs.com/package/JSONStream#jsonstreamparsepath.",
                    "type": "Object"
                }
            ],
            "class": "Nextract.Plugins.Core.Input"
        },
        {
            "file": "build/plugins/core/Logger/Logger.js",
            "line": 15,
            "description": "Winston logging config\nReferences:\n- https://github.com/winstonjs/winston\n- http://stackoverflow.com/a/23330037\n- http://stackoverflow.com/a/25233851",
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Output/Output.js",
            "line": 37,
            "description": "Converts stream objects to csv strings (usually paired with toFile).",
            "itemtype": "method",
            "name": "toCsvString",
            "example": [
                "\n    var formattingConfig = { headers: true, columns: { first_name: 'first_name', last_name: 'last_name', ... } };",
                "\n    transform.Plugins.Core.Output.toCsvString(formattingConfig);"
            ],
            "params": [
                {
                    "name": "formattingConfig",
                    "description": "Object contain config options for the file type being written.\nAll options allowed by cvs-stringify (http://csv.adaltas.com/stringify/) are supported.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a string formatted as a CSV",
                "type": "String"
            },
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Output/Output.js",
            "line": 61,
            "description": "Converts stream objects to JSON strings (usually paired with toFile).",
            "itemtype": "method",
            "name": "toJsonString",
            "example": [
                "\n    transform.Plugins.Core.Output.toJsonString(true);"
            ],
            "params": [
                {
                    "name": "wrapJsonArray",
                    "description": "(defaults to true)",
                    "type": "Boolean"
                },
                {
                    "name": "open",
                    "description": "Custom opening string placed before JSON array. Defaults to '{\\n\\t\"data\": [\\n\\t'.",
                    "type": "String"
                },
                {
                    "name": "close",
                    "description": "Custom close string placed after JSON array. Defaults to ',\\n\\t'.",
                    "type": "String"
                },
                {
                    "name": "seperator",
                    "description": "Custom seperator places between array object elements. Defaults to '\\n\\t]\\n}\\n'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a string formatted as JSON",
                "type": "String"
            },
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Output/Output.js",
            "line": 90,
            "description": "Writes stream to a file (usually preceeded by a call to toCsv, toExcel, toJSON, etc).",
            "itemtype": "method",
            "name": "toFile",
            "example": [
                "\n    var outputFilePath = '/path/to/file.extension';",
                "\n    transform.Plugins.Core.Output.toFile(outputFilePath);"
            ],
            "params": [
                {
                    "name": "formattingConfig",
                    "description": "Object contain config options for the file type being written.\nAll options allowed by cvs-stringify (http://csv.adaltas.com/stringify/) are supported.",
                    "type": "Object"
                }
            ],
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Sort/Sort.js",
            "line": 49,
            "description": "Sorts a stream of objects. Be sure to call Plugins.Core.Sort.sortOut in the pipe()\nimmediately after the call to sortIn.",
            "itemtype": "method",
            "name": "sortIn",
            "example": [
                "\n    someReadableStream.pipe(transform.Core.Sort.sortIn(['user', 'age'], ['asc', 'desc'])).pipe(transform.Core.Sort.sortOut())"
            ],
            "params": [
                {
                    "name": "propertiesToSortBy",
                    "description": "An array of properties to sort by",
                    "type": "Array"
                },
                {
                    "name": "ordersToSortBy",
                    "description": "An array of sort directions. The number of array elements must match\nthe number of elements provided in propertiesToSortBy. The index of each element will be matched against\nthe index of propertiesToSortBy. Valid values are \"asc\" & \"desc\".",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Retuns 1 stream object with information expected as input to sortOut",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Sort"
        },
        {
            "file": "build/plugins/core/Sort/Sort.js",
            "line": 172,
            "description": "Outputs a stream of sorted objects. Must be used in first pipe()\nimmediately after the call to Plugins.Core.Sort.sortIn to pickup the sorted output.",
            "itemtype": "method",
            "name": "sortOut",
            "example": [
                "\n    someReadableStream.pipe(transform.Core.Sort.sortIn(['user', 'age'], ['asc', 'desc'])).pipe(transform.Core.Sort.sortOut())"
            ],
            "params": [
                {
                    "name": "propertiesToSortBy",
                    "description": "An array of properties to sort by",
                    "type": "Array"
                },
                {
                    "name": "ordersToSortBy",
                    "description": "An array of sort directions. The number of array elements must match\nthe number of elements provided in propertiesToSortBy. The index of each element will be matched against\nthe index of propertiesToSortBy. Valid values are \"asc\" & \"desc\".",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Sorted read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Sort"
        },
        {
            "file": "build/plugins/core/Utils/Utils.js",
            "line": 26,
            "description": "Utility which runs all passed Promises and returns only once all have been fufilled",
            "itemtype": "method",
            "name": "runAll",
            "example": [
                "\n    ETL.Plugins.Core.Utils.runAll([p1, p2]);"
            ],
            "params": [
                {
                    "name": "promisesToRunAn",
                    "description": "array of Promises",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of Promise resolutions",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Utils"
        },
        {
            "file": "build/plugins/core/Utils/Utils.js",
            "line": 43,
            "description": "Operates on a stream returning only the requested properties from element",
            "itemtype": "method",
            "name": "pluckProperties",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Utils.pluckProperties(['foo', 'bar', 'baz']))"
            ],
            "params": [
                {
                    "name": "propertiesToTake",
                    "description": "Array of property names to keep",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Utils"
        },
        {
            "file": "build/plugins/core/Utils/Utils.js",
            "line": 72,
            "description": "Operates on a stream returning only the requested properties from element",
            "itemtype": "method",
            "name": "pluckProperties",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Utils.pluckProperties(['foo', 'bar', 'baz']))"
            ],
            "params": [
                {
                    "name": "propertiesToTake",
                    "description": "Array of property names to keep",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Utils"
        },
        {
            "file": "build/plugins/core/Utils/Utils.js",
            "line": 93,
            "description": "Logs the current element flowing through the stream. Useful in debugging.",
            "itemtype": "method",
            "name": "streamConsoleLogStreamItem",
            "example": [
                "\n    someReadableStream.pipe(yourTransformInstance.Plugins.Core.Utils.streamConsoleLogStreamItem(\"DEBUGGING: \"))"
            ],
            "params": [
                {
                    "name": "openingLogMsg",
                    "description": "A string preceeding the element output (defaults to 'Stream debug: ').",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Read/write stream transform to use in conjuction with pipe()",
                "type": "stream.Transform"
            },
            "class": "Nextract.Plugins.Core.Utils"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 179,
            "description": "Plugin name",
            "itemtype": "property",
            "name": "pluginName",
            "type": "String",
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 188,
            "description": "Plugin type (Core or Vendor)",
            "itemtype": "property",
            "name": "pluginType",
            "type": "String",
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 197,
            "description": "Core system functionality is namespaced under this ETL object",
            "itemtype": "property",
            "name": "ETL",
            "type": "Object",
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 205,
            "description": "Provides convient access to the core system config variables",
            "itemtype": "property",
            "name": "ETL.config",
            "type": "Object",
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 214,
            "description": "Provides convient access to core logging functionality",
            "itemtype": "property",
            "name": "ELT.logger",
            "type": "Object",
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 224,
            "description": "Provides a direct db connection to the internal sqlite3 database. Allows plugins to\nuse knex (http://knexjs.org/) directly against the internal database.",
            "itemtype": "method",
            "name": "getInternalDbInstance",
            "example": [
                "\n    let internalDbInstance = somePlugin.getInternalDbInstance();",
                "\n    internalDbInstance.select('title', 'author', 'year').from('books');"
            ],
            "return": {
                "description": "A knex connection object",
                "type": "Object"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 241,
            "description": "Provides access to internal sqlite3 database. Allows plugins to run raw db queries as needed.",
            "itemtype": "method",
            "name": "runInternalQuery",
            "example": [
                "\n    var sql = 'select first_name, last_name, age, salary from users where id = :id';",
                "\n    var sqlParams = { id: id };",
                "\n    somePlugin.runInternalQuery(insertSql, sqlReplacements, false);"
            ],
            "params": [
                {
                    "name": "sql",
                    "description": "SQL statement to execute. Can be a fully formed SQL select statement or\na parameterized one with \":key\" placeholders. If the later, then sqlReplacements\nmust be an object of key/values to be replaced.",
                    "type": "String"
                },
                {
                    "name": "sqlReplacements",
                    "description": "(optional) List of key/value params to be subbed out\nin a parameterized query",
                    "type": "Object"
                },
                {
                    "name": "expectsResults",
                    "description": "Should this query return results?",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If expectsResults was true then the resolved promise should include an\narray of query results. Otherwise, resolve is empty.",
                "type": "Promise"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 285,
            "description": "Provides access to run a select query against the internal sqlite3 database with\na streamed response.",
            "itemtype": "method",
            "name": "runInternalSelectQueryForStream",
            "example": [
                "\n    var sql = 'select first_name, last_name, age, salary from users where id = :id';",
                "\n    var sqlParams = { id: id };",
                "\n    var stream = somePlugin.runInternalSelectQueryForStream(insertSql, sqlReplacements);"
            ],
            "params": [
                {
                    "name": "sql",
                    "description": "SQL statement to execute. Can be a fully formed SQL select statement or\na parameterized one with \":key\" placeholders. If the later, then sqlReplacements\nmust be an object of key/values to be replaced.",
                    "type": "String"
                },
                {
                    "name": "sqlReplacements",
                    "description": "(optional) List of key/value params to be subbed out\nin a parameterized query.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Streams the results of the select query",
                "type": "Stream"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 312,
            "description": "Some streams require a more traditional blocking like operation (e.g.) Sort, Group By, etc. We\nwant to process the stream and return back a stream without breaking the stream pipe or giving\nthe appearance of a blocking action.  This method will take the first item of a stream and use it\nto create a temporary table in our internal database by inspecting its keys and values.",
            "itemtype": "method",
            "name": "createTemporaryTableForStream",
            "example": [
                "\n    See the sortBy method of the core Sort plugin"
            ],
            "params": [
                {
                    "name": "streamFunction",
                    "description": "The first object/element of a stream",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Resolves with the temporary table name",
                "type": "Promise"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 368,
            "description": "Removes temporary internal database tables creates from usage of createTemporaryTableForStream.",
            "itemtype": "method",
            "name": "dropTemporaryTableForStream",
            "params": [
                {
                    "name": "tableName",
                    "description": "Name of the internal table to be dropped",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved once table has been resolved",
                "type": "Promise"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 393,
            "description": "Convinence method used by plugins to run code in a background web worker thread. A worker\nscript must exist in the same directory as the plugin itself with a name of Worker.js. The\nformat of the worker script must match the one defined by the npm workerjs module -\nhttps://www.npmjs.com/package/workerjs#node-mode---allowing-require",
            "itemtype": "method",
            "name": "runInWorker",
            "example": [
                "\n    var workerMsg = { cmd: 'orderBy', args: [collection, iteratees, orders] };",
                "\n    return pluginUtils.runInWorker(workerMsg);"
            ],
            "params": [
                {
                    "name": "workerMsg",
                    "description": "The message to be passed to the worker (can be an object)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolved with worker response msg",
                "type": "Promise"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 441,
            "description": "Accepts a stream transform function that conforms to the through2.obj stream wrapper\nAPI. Caller can choose to use through2 or one of the through2 helper modules (map, filter, spy).\nFor more information see - https://github.com/rvagg/through2.",
            "itemtype": "method",
            "name": "buildStreamTransform",
            "example": [
                "\n    var streamFunction = function(element, index) { return element.foo <= 10 };",
                "\n    return pluginName.runTask('sometaskname', streamFunction, 'filter');"
            ],
            "params": [
                {
                    "name": "streamFunction",
                    "description": "Function that conforms to the through2.obj stream wrapper API",
                    "type": "Function"
                },
                {
                    "name": "streamFlushFunction",
                    "description": "Function that conforms to the through2.obj stream flush method API (pass null for no flush)",
                    "type": "Function"
                },
                {
                    "name": "streamFunctionType",
                    "description": "(optional, defaults to standard through2) standard, filter, map, reduce, or spy",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns stream transform wrapped using through2",
                "type": "Function"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/plugins/pluginBase.js",
            "line": 487,
            "description": "When a plugin needs to get a handle on an incoming stream without using something like through2\ndirectly this method can be useful.  It gets a handle in the incoming stream and acts as a passthrough\nthat can be immediately used with another pipe() call.",
            "itemtype": "method",
            "name": "getStreamPassthroughForPipe",
            "example": [
                "\n    pluginName.getStreamPassthroughForPipe().pipe(someStreamMethod);"
            ],
            "return": {
                "description": "Returns passthrough stream",
                "type": "Stream"
            },
            "class": "Nextract.PluginBase"
        },
        {
            "file": "build/nextract.js",
            "line": 42,
            "description": "Object containing references to the Core and Vendor plugins that have been loaded in the current program",
            "itemtype": "property",
            "name": "Plugins",
            "type": "Object",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 50,
            "description": "Object containing references to core plugins that have loaded in the current program",
            "itemtype": "property",
            "name": "Plugins.Core",
            "type": "Object",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 59,
            "description": "Object containing references to vendor plugins that have loaded in the current program",
            "itemtype": "property",
            "name": "Plugins.Vendor",
            "type": "Object",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 96,
            "description": "Used to mixin the functionality of a core or 3rd party vendor ETL plugin. These\nplugins are located in plugins/core & plugins/vendor.",
            "itemtype": "method",
            "name": "loadPlugins",
            "params": [
                {
                    "name": "pluginTypes",
                    "description": "Type of plugin being imported (Core or Vendor)",
                    "type": "String"
                },
                {
                    "name": "pluginNames",
                    "description": "Plugin(s) to import",
                    "type": "String | Array"
                }
            ],
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 106,
            "description": "Used to count the number of items flowing into or out of a stream step.\nMost often used before and after a transform task to see the impact of a task.",
            "example": [
                "\n    someReadableStream.pipe(transform.countStream('Step1', 'in'))\n     .pipe(transform.Plugins.Core.Filter.greaterThan('age', 30))\n     .pipe(transform.countStream('Step1', 'out'))"
            ],
            "itemtype": "method",
            "name": "countStream",
            "params": [
                {
                    "name": "stepKey",
                    "description": "A unique name for the step (shared by the in and out buckets)",
                    "type": "String"
                },
                {
                    "name": "direction",
                    "description": "Valid values are \"in\" & \"out\"",
                    "type": "String"
                }
            ],
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 125,
            "description": "Used to print a report that contains the in and out counts recorded\nfrom countStream calls within a transform.",
            "example": [
                "\n    transform.printStepProfilingReport();"
            ],
            "itemtype": "method",
            "name": "printStepProfilingReport",
            "return": {
                "description": "Triggers a core logger plugin logger.info() call that dumps out the\ncontents of transformEventData."
            },
            "class": "Nextract"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nExample: CSV input and sort...",
            "line": " build/examples/csvAndSort.js:3"
        },
        {
            "message": "Missing item type\nA handful of heler functions that are used throughout the examples",
            "line": " build/examples/exampleUtils.js:3"
        },
        {
            "message": "Missing item type\nExample: Filter and group data...",
            "line": " build/examples/filterAndGroup.js:3"
        },
        {
            "message": "Missing item type\nExample: Http request and pluck...",
            "line": " build/examples/httpAndPluck.js:3"
        },
        {
            "message": "Missing item type\nExample: JSON input and sort...",
            "line": " build/examples/jsonAndSort.js:3"
        },
        {
            "message": "Missing item type\nExample: Running some etlJob tasks in parallel",
            "line": " build/examples/parallelTasks.js:3"
        },
        {
            "message": "Missing item type\nExample: Parameterized query",
            "line": " build/examples/parameterizedQuery.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queries.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queryAndSortBenchmark.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queryCalcAndFilter.js:3"
        },
        {
            "message": "Missing item type\nWinston logging config\nReferences:\n- https://github.com/winstonjs/winston\n- http://stackoverflow.com/a/23330037\n- http://stackoverflow.com/a/25233851",
            "line": " build/plugins/core/Logger/Logger.js:15"
        }
    ]
}