{
    "project": {
        "name": "nextract",
        "description": "",
        "version": "0.0.1",
        "url": ""
    },
    "files": {
        "build/examples/csvAndSort.js": {
            "name": "build/examples/csvAndSort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/exampleUtils.js": {
            "name": "build/examples/exampleUtils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/filterAndGroup.js": {
            "name": "build/examples/filterAndGroup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/jsonAndSort.js": {
            "name": "build/examples/jsonAndSort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/parallelTasks.js": {
            "name": "build/examples/parallelTasks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/parameterizedQuery.js": {
            "name": "build/examples/parameterizedQuery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queries.js": {
            "name": "build/examples/queries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queryAndCalc.js": {
            "name": "build/examples/queryAndCalc.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/examples/queryAndSort.js": {
            "name": "build/examples/queryAndSort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Calculator.js": {
            "name": "build/plugins/core/Calculator.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Calculator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Database.js": {
            "name": "build/plugins/core/Database.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Nextract.Plugins.Core.Database": 1
            },
            "namespaces": {}
        },
        "build/plugins/core/Filter.js": {
            "name": "build/plugins/core/Filter.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/GroupBy.js": {
            "name": "build/plugins/core/GroupBy.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.GroupBy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Http.js": {
            "name": "build/plugins/core/Http.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Input.js": {
            "name": "build/plugins/core/Input.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Logger.js": {
            "name": "build/plugins/core/Logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Output.js": {
            "name": "build/plugins/core/Output.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Output": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Sort.js": {
            "name": "build/plugins/core/Sort.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Sort": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Utils.js": {
            "name": "build/plugins/core/Utils.js",
            "modules": {},
            "classes": {
                "Nextract.Plugins.Core.Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/core/Validator.js": {
            "name": "build/plugins/core/Validator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/plugins/pluginUtils.js": {
            "name": "build/plugins/pluginUtils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build/nextract.js": {
            "name": "build/nextract.js",
            "modules": {},
            "classes": {
                "Nextract": 1
            },
            "fors": {
                "Nextract": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Nextract.Plugins.Core.Calculator": {
            "name": "Nextract.Plugins.Core.Calculator",
            "shortname": "Nextract.Plugins.Core.Calculator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Calculator.js",
            "line": 3,
            "description": "Mixes in a series of common mathematical calculations"
        },
        "Nextract.Plugins.Core.Database": {
            "name": "Nextract.Plugins.Core.Database",
            "shortname": "Nextract.Plugins.Core.Database",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Nextract.Plugins.Core.Filter": {
            "name": "Nextract.Plugins.Core.Filter",
            "shortname": "Nextract.Plugins.Core.Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Filter.js",
            "line": 13,
            "description": "Mixes in methods used to filter sets of data"
        },
        "Nextract.Plugins.Core.GroupBy": {
            "name": "Nextract.Plugins.Core.GroupBy",
            "shortname": "Nextract.Plugins.Core.GroupBy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/GroupBy.js",
            "line": 21,
            "description": "Mixes in methods used to perform grouping operations on data"
        },
        "Nextract.Plugins.Core.Input": {
            "name": "Nextract.Plugins.Core.Input",
            "shortname": "Nextract.Plugins.Core.Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Input.js",
            "line": 21,
            "description": "Mixes in methods used to read files"
        },
        "Nextract.Plugins.Core.Output": {
            "name": "Nextract.Plugins.Core.Output",
            "shortname": "Nextract.Plugins.Core.Output",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Output.js",
            "line": 25,
            "description": "Mixes in methods used to export files"
        },
        "Nextract.Plugins.Core.Sort": {
            "name": "Nextract.Plugins.Core.Sort",
            "shortname": "Nextract.Plugins.Core.Sort",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Sort.js",
            "line": 21,
            "description": "Mixes in methods used to sort data"
        },
        "Nextract.Plugins.Core.Utils": {
            "name": "Nextract.Plugins.Core.Utils",
            "shortname": "Nextract.Plugins.Core.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/plugins/core/Utils.js",
            "line": 3,
            "description": "Mixes in methods used to work with a database"
        },
        "Nextract": {
            "name": "Nextract",
            "shortname": "Nextract",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build/nextract.js",
            "line": 17,
            "description": "ETL class that all programs start from",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "build/examples/csvAndSort.js",
            "line": 3,
            "description": "Example: CSV input and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/exampleUtils.js",
            "line": 3,
            "description": "A handful of heler functions that are used throughout the examples",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/filterAndGroup.js",
            "line": 3,
            "description": "Example: Filter and group data...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/jsonAndSort.js",
            "line": 3,
            "description": "Example: JSON input and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/parallelTasks.js",
            "line": 3,
            "description": "Example: Running some ETL tasks in parallel",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/parameterizedQuery.js",
            "line": 3,
            "description": "Example: Parameterized query",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queries.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queryAndCalc.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/examples/queryAndSort.js",
            "line": 3,
            "description": "Example: Query and sort...",
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator.js",
            "line": 42,
            "description": "Adds two numbers and/or object properties",
            "itemtype": "method",
            "name": "add",
            "example": [
                "\n    ETL.Plugins.Core.Calculator.add(collection, 'salary', 1000, 'new_salary');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the updated collection",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator.js",
            "line": 60,
            "description": "Subtracts two numbers and/or object properties",
            "itemtype": "method",
            "name": "subtract",
            "example": [
                "\n    ETL.Plugins.Core.Calculator.subtract(collection, 'salary', 1000, 'new_salary');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the updated collection",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator.js",
            "line": 78,
            "description": "Divides two numbers and/or object properties",
            "itemtype": "method",
            "name": "divide",
            "example": [
                "\n    ETL.Plugins.Core.Calculator.divide(collection, 'salary', 10, 'new_salary');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the updated collection",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator.js",
            "line": 96,
            "description": "Multiplies two numbers and/or object properties",
            "itemtype": "method",
            "name": "multiply",
            "example": [
                "\n    ETL.Plugins.Core.Calculator.multiply(collection, 'salary', 10, 'new_salary');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "firstPropOrVal",
                    "description": "The 1st value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "secondPropOrVal",
                    "description": "The 2nd value or property to use in this operation",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the updated collection",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Calculator.js",
            "line": 114,
            "description": "Concatenates strings and/or object properties",
            "itemtype": "method",
            "name": "concat",
            "example": [
                "\n    ETL.Plugins.Core.Calculator.concat(collection, ['Mr/Mrs:', 'first_name', 'last_name'], ' ', 'full_name');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Object"
                },
                {
                    "name": "propsOrValsToConcat",
                    "description": "An array of strings and/or object properties to concat",
                    "type": "Array"
                },
                {
                    "name": "delimiter",
                    "description": "The delimiter to use in between each propsOrValsToConcat",
                    "type": "String"
                },
                {
                    "name": "propertyToUpdateOrAdd",
                    "description": "The object property to update or create with the value\nof this operation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the updated collection",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Calculator"
        },
        {
            "file": "build/plugins/core/Database.js",
            "line": 178,
            "description": "Raw query interface for select statements",
            "itemtype": "method",
            "name": "selectQuery",
            "example": [
                "\n    var sql = 'select first_name, last_name, age, salary from users where id = :id';",
                "\n    var sqlParams = { id: id };",
                "\n    ETL.Plugins.Core.Database.selectQuery('dbname', sql, sqlParams);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "sql",
                    "description": "SQL statement to execute. Can be a fully formed SQL select statement or\na parameterized one with \":key\" placeholders. If the later, then sqlParams\nmust be an object of key/values to be replaced.",
                    "type": "String"
                },
                {
                    "name": "sqlParams",
                    "description": "(optional) List of key/value params to be subbed out in a parameterized query",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of database rows that match the given select statement",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database.js",
            "line": 213,
            "description": "Allows you to run an DELETE query against a database using data obtained from previous steps. Runs\na query for each row in the collection.",
            "itemtype": "method",
            "name": "deleteQuery",
            "example": [
                "\n    var matchCriteria = [\n     { tableColumn: 'first_name', comparator: '=', collectionField: 'first_name' },\n     { tableColumn: 'last_name', comparator: '=', collectionField: 'last_name' }\n    ];",
                "\n    return ETL.Plugins.Core.Database.deleteQuery('nextract_sample', 'users', userData, matchCriteria);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection to iterate on",
                    "type": "Array"
                },
                {
                    "name": "matchCriteria",
                    "description": "Array of objects with key/value params to be subbed out in a\nparameterized query. The expected format is  [{ tableColumn: '', comparator: '', collectionField: '' }].",
                    "type": "Array"
                },
                {
                    "name": "maxParallelQueries",
                    "description": "(optional) Max number of queries to run in parallel (defaults to 5)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Promise resolved once all queries have completed",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database.js",
            "line": 245,
            "description": "Allows you to run an UPDATE query against a database using data obtained from previous steps. Runs\na query for each row in the collection.",
            "itemtype": "method",
            "name": "updateQuery",
            "example": [
                "\n    var userData = [ { id: 1, first_name: 'foo' }, {...} ];",
                "\n    var matchCriteria = [{ tableColumn: 'id', comparator: '=', collectionField: 'id' }];",
                "\n    return ETL.Plugins.Core.Database.updateQuery('nextract_sample', 'users', userData, ['first_name'], matchCriteria);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection to iterate on",
                    "type": "Array"
                },
                {
                    "name": "columnsToUpdate",
                    "description": "Array of property (column) names to use in the UPDATE",
                    "type": "Array"
                },
                {
                    "name": "matchCriteria",
                    "description": "Array of objects with key/value params to be subbed out in a\nparameterized query. The expected format is  [{ tableColumn: '', comparator: '', collectionField: '' }].",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolved with the give collection once all queries have completed",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database.js",
            "line": 285,
            "description": "Insert query for collections. Will insert each collection item into a database table.\nUses batched inserts for performance gains.",
            "itemtype": "method",
            "name": "insertQuery",
            "example": [
                "\n    var columnsToInsert = ['first_name', 'last_name', 'age'];",
                "\n    var collectionsToInsert = [\n     { 'first_name': 'foo', 'last_name': 'bar', 'age': 25 },\n     { 'first_name': 'foo', 'last_name': 'baz', 'age': 48 }\n    ];",
                "\n    return ETL.Plugins.Core.Database.insertQuery('nextract_sample', 'users', collectionsToInsert, columnsToInsert);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "tableName",
                    "description": "Table name",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection to iterate on",
                    "type": "Array"
                },
                {
                    "name": "columnsToInsert",
                    "description": "Array of property (column) names to use in the INSERT",
                    "type": "Array"
                },
                {
                    "name": "batchAmount",
                    "description": "(optional) Number of rows to batch insert (defaults to 1000)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Promise resolved with the give collection once all queries have completed",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Database.js",
            "line": 385,
            "description": "Allows you to run a select query against a database using data obtained from previous steps. Runs\na query for each row in the collection. The collection will be returned with the properties of the\noriginal item data + the properties of the joined data.  Optionally returns all or just matched rows.",
            "itemtype": "method",
            "name": "joinQuery",
            "example": [
                "\n    var joinSQL = 'select first_name, last_name from users where id = :id';",
                "\n    var joinColumnsToReturn = ['first_name', 'last_name'];",
                "\n    ETL.Plugins.Core.Database.joinQuery('nextract_sample', joinSQL, queryResults, true, joinColumnsToReturn);"
            ],
            "params": [
                {
                    "name": "dbName",
                    "description": "A database name that matches a object key defined in your Nextract config file",
                    "type": "String"
                },
                {
                    "name": "sqlStatment",
                    "description": "The sql to run for each row in the collection. The WHERE clause should contain\nsome :propertyName reference to match on against the current row. The query must return only 1 matching row.",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection to iterate on",
                    "type": "Array"
                },
                {
                    "name": "returnedUnmatched",
                    "description": "(optional: defaults to true) Returns all original collection items\nwill null as the value for properties missed in the join.  If true, then joinColumnsToReturn must be given.",
                    "type": "Boolean"
                },
                {
                    "name": "joinColumnsToReturn",
                    "description": "A list of the properties to return in the unmatched case. Should\nnormally match the columns defined in the SELECT clause. Only required if returnedUnmatched is set to true.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolved once all queries have completed",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Database"
        },
        {
            "file": "build/plugins/core/Filter.js",
            "line": 21,
            "description": "Iterates over elements of collection, returning an array of all elements\nthat equal the given testValue.",
            "itemtype": "method",
            "name": "equals",
            "example": [
                "\n    ETL.Plugins.Core.Filter.equals(collection, 'foo', 'name');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Array|Object"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against during each iteration",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against during each iteration",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of all elements that equal the testValue",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter.js",
            "line": 44,
            "description": "Iterates over elements of collection, returning an array of all elements\nthat are greater than the given number.",
            "itemtype": "method",
            "name": "greaterThan",
            "example": [
                "\n    ETL.Plugins.Core.Filter.greaterThan(collection, 10);"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Array|Object"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against during each iteration",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against during each iteration",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of all elements that are greater than the testValue",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter.js",
            "line": 67,
            "description": "Iterates over elements of collection, returning an array of all elements\nthat are less than the given number.",
            "itemtype": "method",
            "name": "lessThan",
            "example": [
                "\n    ETL.Plugins.Core.Filter.lessThan(collection, 10);"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Array|Object"
                },
                {
                    "name": "valueToTest",
                    "description": "The value being against during each iteration",
                    "type": "String|Number"
                },
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against during each iteration",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of all elements that are less than the testValue",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/Filter.js",
            "line": 90,
            "description": "Creates a duplicate-free version of a collection, using SameValueZero for equality comparisons, in which\nonly the first occurrence of each element is kept.\n\nFor usage reference - https://lodash.com/docs#uniqBy",
            "itemtype": "method",
            "name": "uniqBy",
            "example": [
                "\n    ETL.Plugins.Core.Filter.uniqBy(collection, 'last_name');"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Array|Object"
                },
                {
                    "name": "propertyToTest",
                    "description": "The object property name being tested against during each iteration",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolved with the new duplicate free array",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Filter"
        },
        {
            "file": "build/plugins/core/GroupBy.js",
            "line": 29,
            "description": "Computes the maximum value of array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "maxBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.maxBy(objects, 'n');"
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.GroupBy"
        },
        {
            "file": "build/plugins/core/GroupBy.js",
            "line": 46,
            "description": "Computes the minimum value of array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#minBy",
            "itemtype": "method",
            "name": "minBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.minBy(objects, 'n');"
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.GroupBy"
        },
        {
            "file": "build/plugins/core/GroupBy.js",
            "line": 63,
            "description": "Computes the mean of the values in array. It accepts iteratee which is invoked for each element in\narray to generate the criterion by which the value is ranked. The iteratee is invoked with\none argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "meanBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.meanBy(objects, 'n');"
            ],
            "return": {
                "description": "Promise resolved with the maximum value",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.GroupBy"
        },
        {
            "file": "build/plugins/core/GroupBy.js",
            "line": 80,
            "description": "Computes the sum of the values in array. It accepts iteratee which is invoked for each element\nin array to generate the value to be summed. The iteratee is invoked with one argument: (value).\n\nFor usage reference - https://lodash.com/docs#maxBy",
            "itemtype": "method",
            "name": "sumBy",
            "example": [
                "\n    ETL.Plugins.Core.GroupBy.sumBy(objects, 'n');"
            ],
            "return": {
                "description": "Promise resolved with the sum",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.GroupBy"
        },
        {
            "file": "build/plugins/core/Http.js",
            "line": 3,
            "description": "Custom module used to ...",
            "class": "Nextract.Plugins.Core.Input"
        },
        {
            "file": "build/plugins/core/Input.js",
            "line": 79,
            "description": "Used to read files",
            "itemtype": "method",
            "name": "readFile",
            "example": [
                "\n    ETL.Plugins.Core.Input.readFile('json', sampleUsersInputFilePath);"
            ],
            "params": [
                {
                    "name": "fileType",
                    "description": "Type of file to write; json, csv, or excel",
                    "type": "String"
                },
                {
                    "name": "filePath",
                    "description": "Full path of file to read (include filename and extension)",
                    "type": "String"
                },
                {
                    "name": "parserConfig",
                    "description": "If fileType is \"csv\" then you can also pass a\nparsing definition to handle the specific needs of your csv. If noe custom parserConfig\nis given then a default config of { delimiter: ',', columns: true } is used. The parserConfig\nobject allow all paser options supported by cvs-parse (http://csv.adaltas.com/parse/).",
                    "type": "Object"
                }
            ],
            "class": "Nextract.Plugins.Core.Input"
        },
        {
            "file": "build/plugins/core/Logger.js",
            "line": 15,
            "description": "Winston logging config\nReferences:\n- https://github.com/winstonjs/winston\n- http://stackoverflow.com/a/23330037\n- http://stackoverflow.com/a/25233851",
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Output.js",
            "line": 95,
            "description": "Used to output files",
            "itemtype": "method",
            "name": "writeFile",
            "example": [
                "\n    ETL.Plugins.Core.Output.writeFile('csv', \"path/to/file.csv\", { header: true }, data);"
            ],
            "params": [
                {
                    "name": "fileType",
                    "description": "Type of file to write; json, csv, or excel",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "An array of objects to be wrtten to the file",
                    "type": "Array"
                },
                {
                    "name": "filePath",
                    "description": "Full path of file to write (include filename and extension)",
                    "type": "String"
                },
                {
                    "name": "formattingConfig",
                    "description": "Object contain config options for the file type being written.\n1) If cvs - all options allowed by cvs-stringify (http://csv.adaltas.com/stringify/) are supported\n2) If json - the only option is formatting with X number of spaces (e.g.) {spaces: 2}\n3) If excel - see https://www.npmjs.com/package/excel4node",
                    "type": "Object"
                }
            ],
            "class": "Nextract.Plugins.Core.Output"
        },
        {
            "file": "build/plugins/core/Sort.js",
            "line": 29,
            "description": "This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by.\nIf orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of \"desc\"\nfor descending or \"asc\" for ascending sort order of corresponding values.\n\nFor usage reference - https://lodash.com/docs#orderBy",
            "itemtype": "method",
            "name": "orderBy",
            "example": [
                "\n    ETL.Plugins.Core.Sort.orderBy(users, ['user', 'age'], ['asc', 'desc']);"
            ],
            "return": {
                "description": "Promise resolved with the new sorted array",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Sort"
        },
        {
            "file": "build/plugins/core/Sort.js",
            "line": 49,
            "description": "Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee.\nThis method performs a stable sort, that is, it preserves the original sort order of equal elements.\nThe iteratees are invoked with one argument: (value).\n\nFor usage reference - https://lodash.com/docs#sortBy",
            "itemtype": "method",
            "name": "sortBy",
            "example": [
                "\n    ETL.Plugins.Core.Sort.sortBy(users, ['user', 'age']);"
            ],
            "return": {
                "description": "Promise resolved with the new sorted array",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Sort"
        },
        {
            "file": "build/plugins/core/Sort.js",
            "line": 68,
            "description": "Sorts the elements of an array in place via a custom compare function\n\nFor usage reference - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
            "itemtype": "method",
            "name": "customCompare",
            "example": [
                "\n    ETL.Plugins.Core.Sort.customCompare(users, compareFunction);"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over",
                    "type": "Array|Object"
                },
                {
                    "name": "Specifies",
                    "description": "a function that defines the sort order",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Promise resolved with the new sorted array",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Sort"
        },
        {
            "file": "build/plugins/core/Utils.js",
            "line": 11,
            "description": "Utility which runs all passed Promises and returns only once all have been fufilled",
            "itemtype": "method",
            "name": "runAll",
            "example": [
                "\n    ETL.Plugins.Core.Utils.runAll([p1, p2]);"
            ],
            "params": [
                {
                    "name": "promisesToRunAn",
                    "description": "array of Promises",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolved with an array of Promise resolutions",
                "type": "Promise"
            },
            "class": "Nextract.Plugins.Core.Utils"
        },
        {
            "file": "build/plugins/core/Validator.js",
            "line": 3,
            "description": "Custom module used to validate data",
            "class": "Nextract"
        },
        {
            "file": "build/plugins/pluginUtils.js",
            "line": 15,
            "description": "Nextract Plugin Utils",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 27,
            "description": "Object containing references to core plugins that have loaded in the current program",
            "itemtype": "property",
            "name": "Plugins.Core",
            "type": "Object",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 36,
            "description": "Object containing references to vendor plugins that have loaded in the current program",
            "itemtype": "property",
            "name": "Plugins.Vendor",
            "type": "Object",
            "class": "Nextract"
        },
        {
            "file": "build/nextract.js",
            "line": 50,
            "description": "Used to mixin the functionality of a core or 3rd party vendor ETL plugin. These\nplugins are located in plugins/core & plugins/vendor.",
            "itemtype": "method",
            "name": "loadPlugin",
            "params": [
                {
                    "name": "pluginTypes",
                    "description": "Type of plugin being imported (Core or Vendor)",
                    "type": "String"
                },
                {
                    "name": "pluginNames",
                    "description": "Plugin(s) to import",
                    "type": "String | Array"
                }
            ],
            "class": "Nextract"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nExample: CSV input and sort...",
            "line": " build/examples/csvAndSort.js:3"
        },
        {
            "message": "Missing item type\nA handful of heler functions that are used throughout the examples",
            "line": " build/examples/exampleUtils.js:3"
        },
        {
            "message": "Missing item type\nExample: Filter and group data...",
            "line": " build/examples/filterAndGroup.js:3"
        },
        {
            "message": "Missing item type\nExample: JSON input and sort...",
            "line": " build/examples/jsonAndSort.js:3"
        },
        {
            "message": "Missing item type\nExample: Running some ETL tasks in parallel",
            "line": " build/examples/parallelTasks.js:3"
        },
        {
            "message": "Missing item type\nExample: Parameterized query",
            "line": " build/examples/parameterizedQuery.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queries.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queryAndCalc.js:3"
        },
        {
            "message": "Missing item type\nExample: Query and sort...",
            "line": " build/examples/queryAndSort.js:3"
        },
        {
            "message": "Missing item type\nCustom module used to ...",
            "line": " build/plugins/core/Http.js:3"
        },
        {
            "message": "Missing item type\nWinston logging config\nReferences:\n- https://github.com/winstonjs/winston\n- http://stackoverflow.com/a/23330037\n- http://stackoverflow.com/a/25233851",
            "line": " build/plugins/core/Logger.js:15"
        },
        {
            "message": "Missing item type\nCustom module used to validate data",
            "line": " build/plugins/core/Validator.js:3"
        },
        {
            "message": "Missing item type\nNextract Plugin Utils",
            "line": " build/plugins/pluginUtils.js:15"
        }
    ]
}